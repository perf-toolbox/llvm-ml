load("@pip//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_library")
load("@rules_python//python:packaging.bzl", "py_package")

# compile_pip_requirements_3_10(
#     name = "requirements_3_10",
#     extra_args = ["--allow-unsafe", "--resolver=backtracking"],
#     requirements_in = "requirements.in",
#     requirements_txt = "requirements_lock_3_10.txt",
#     requirements_windows = "requirements_windows_3_10.txt",
# )

cc_library(
    name = "py_structures_static",
    srcs = [
        "py_structures.cpp",
    ],
    linkstatic = True,
    deps = [
        "@//lib:cpp_structures",
        "@nanobind",
    ],
)

cc_shared_library(
    name = "py_structures",
    shared_lib_name = select({
        "@platforms//os:linux": "_llvm_ml_impl.so",
        "@platforms//os:macos": "_llvm_ml_impl.so",
        "//conditions:default": "",
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":py_structures_static",
    ],
)

py_library(
    name = "llvm_ml",
    srcs = glob(
        ["llvm_ml/**/*.py"],
        allow_empty = False,
    ),
    data = [
        ":_llvm_ml_impl.py",
        ":py_structures",
    ],
    imports = ["."],
    visibility = ["//visibility:public"],
    deps = [
        requirement("numpy"),
        requirement("tqdm"),
        requirement("protobuf"),
    ],
)

py_package(
    name = "llvm_ml_pkg",
    visibility = ["//visibility:public"],
    deps = [
        ":llvm_ml",
    ],
)

exports_files(["pytest_wrapper.py"])
